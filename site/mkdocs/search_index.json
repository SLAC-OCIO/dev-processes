{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the SLAC OCIO DevOps Documentation Project\n\n\n\n\nusing the navigation to the left, you can become better aquainted with best practices, structure, coding conventions and more.\n\n\n\n\nBe sure to read the About section for the process of adding to this documentation.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-the-slac-ocio-devops-documentation-project", 
            "text": "using the navigation to the left, you can become better aquainted with best practices, structure, coding conventions and more.   Be sure to read the About section for the process of adding to this documentation.", 
            "title": "Welcome to the SLAC OCIO DevOps Documentation Project"
        }, 
        {
            "location": "/about/meta/", 
            "text": "Meta Documentation\n\n\nDocumentation about the Documentation\n\n\n:laughing:  \n\n\nThis set of documentation exists to promote a transparent and always available set of guides for developing, editing and improving the development of software in OCIO. This documentations' source code is available at\nhttps://github.com/SLAC-OCIO/dev-processes\n\n\nIf you're a member of the SLAC-OCIO Github organization, you can access and edit this documentation. We welcome all pull requests, subject to review.  \n\n\n\n\nOrganization\n\n\nThe documentation set (dset) is organized according to subject. The syntax of the documentation is Markdown, particularly \nGithub Markdown\n.\n\n\n\n\nNote:\n\n\n\n\nLocation of the code repository: \nSLAC OCIO Github\n \n\n\nRequest Access: \nService Now\n\n\n\n\n\n\n Repository Structure\n\n\nIn the \ndocumentation repository\n there is a folder labeled 'Docs'\nThis is the primary folder for storing documentation files. In that folder are several others.  Each folder refers to a high-level topic or team.\n\n\n\n\n - docs\n\n\n\n\n core-team\n    \n \n - DRUPAL_UPGRADE_PROCESS.md\n    \n \n - VENDOR_DEPLOY.md\n    \n \n - VENDOR_PR.md\n    \n \n - overview.md\n\n\n drupal\n\n\n\n\n - COMS_GIT.md\n\n - drupal-overview.md\n\n - grail.md\n\n - mamp-linux.md\n\n - slac_sites.md\n\n\n\n\n\n\n\n\nDocumentation Creation and Editing Process\n\n\n Create a document\n\n\n\n\nClone the repository, locally.\n\n\nCreate a new branch with the appropriate branch name. and switch to it.\n\n\nIf you are adding a new subject, or team, create a new directory in the \ndocs\n folder\n\n\nIf you are adding a new page to the current dset, be sure to create the page in the appropriate folder, and that the file suffix is \n.md\n and the file is written with proper Markdown syntax.\n\n\n\n\nOnce you have finished editing, create a commit message with a summary of your changes and push your changes remotely.\n\n\n Edit  existing document\n\n\nIf you find mistakes, errors or something missing, you can edit any document in the repository.\n\n\n\n\nClone the repository, locally.\n\n\nCreate a new branch with the appropriate branch name. and switch to it.\n\n\nOpen the document in your preferred editor.\n\n\nMake appropriate edits using Markdown syntax.\n\n\nSave your document\n\n\nStage your changes\n\n\nCommit your changes, with a summary of the changes you made, or the subject you edited.\n\n\nPush your branch to GitHub\n\n\nLogin to Github, and issue a pull request.\n\n\n\n\n Rename a document\n\n\nGenerally, the name doesn't matter - since we're using readthedocs.io, the structure is maintained via the yaml file in the root directory of the repository. If you do rename follow the steps in Edit existing document.\n\n\n Delete a document\n\n\nYou can delete documents but it is generally advised to restructure or edit them instead. If documents are deleted that should be there, OCIO-Leads will restore it.\n\n\n\n\nTools\n\n\nAt the very least the following tools are needed:\n\n\n\n\ngit\n installed locally \n\n\nA text editor, in ascii mode. \n\n\nA modern web browser\n\n\n\n\n\n\nNote:\n\n\n\n\nA great Git UI application called \nGitKraken\n is available.  It has a pleasant and intuitive UI, simplifies most operations and can perform pull request through Github. There is a no-cost version and a pro version.\n\n\nFor assistance with Git installation please see \nGithubs Article on Git installation\n\n\nMost code editors can edit markdown. Popular text editors include \nAtom\n, \nSublime Text\n, \nNotepad++\n\nThrough implication - that you're reading this document - denotes you have a web browser.\n\n\n\n\n\n\nPublication\n\n\nOnce you are happy with your document, and have saved it - you will need to insert it in the navigation tree of the \nReadTheDocs.io\n site.\n\n\n Editing mkdocs.yml\n\n\nOpen the \nmkdocs.yml\n file in the root directory of the repository you cloned.\n\n\nIgnore (don't change) anything above the following:\n\n\npages:\n  - Home: index.md\n  - Drupal: \n    - 'Overview of Drupal at SLAC': 'drupal/drupal-overview.md'\n    - 'Local Development of Drupal': 'drupal/mamp-linux.md'\n    - 'OS-X Development Machine Configuration': 'drupal/grail.md'\n    - 'Communications \n---\n Dev Processes': 'drupal/COMS_GIT.md'\n    - 'Up and Running with SLAC Sites': 'drupal/slac_sites.md'\n  - Core Team:\n    - 'Overview of Drupal for DevOps Team':  'core-team/overview.md'\n    - 'Deployment of Vendor Pull Request': 'core-team/VENDOR_PR.md'\n    - 'Deployment of Production from Vendor': 'core-team/VENDOR_DEPLOY.md'\n\n\n\n\n\n\nNew Team/Project\n\n\nAssuming you created a new folder (you should have) in the \ndocs\n directory, create a new second level list item:\n\n\n- Core Team:\n    - 'Overview of Drupal for DevOps Team':  'core-team/overview.md'\n    - 'Deployment of Vendor Pull Request': 'core-team/VENDOR_PR.md'\n    - 'Deployment of Production from Vendor': 'core-team/VENDOR_DEPLOY.md'\n- My New Project:\n    - 'Overview of My New Project': 'new-project/overview.md'\n    - 'Other interesting stuff': 'new-project/other.md'\n\n\n\n\nYou will see that I added \n- My New Project:\n as well as two 'pages' below the second level list item, and indented fours spaces, adding a \n-\n.\n\n\n\n\nNote:\n\n\n\n\nThere is never any reason for creating a top level list item. Please retain the structure already created\n\n\nThe syntax used in the yml or Yaml file can be further understood in \nthis article\n\n\nThis file is very syntax sensitive, so please follow the examples, we suggest cutting and pasting - then editing to suit your update.\n\n\n\n\n\n\nThe structure of the navigation is very simple, yet elegant. The top level list item: \npages\n creates a list object for parsing. Second level items (home, drupal, core-team) are akin to main navigation items - these are subject to re-organization as time progresses and more projects are ported here. \n\n\nThe secondary level items should follow this convention: \n- Section Name :\n\nTertiary level items should follow this convention: \n- 'Subject of SubSection': 'second-level-label/file-name.md'\n\n\nThat's it - the yml file looks intimidating to a non-developer/non-coder, but is very simple and elegant.\n\n\n\n\n\n\nMeta Documentation\n\n\nDocumentation about the Documentation\n\n\nOrganization\n\n\n Repository Structure\n\n\n\n\n\n\nDocumentation Creation and Editing Process\n\n\n Create a document\n\n\n Edit  existing document\n\n\n Rename a document\n\n\n Delete a document\n\n\n\n\n\n\nTools\n\n\nPublication\n\n\n Editing mkdocs.yml\n\n\nNew Team/Project\n\n\nNote:", 
            "title": "About this Documentation"
        }, 
        {
            "location": "/about/meta/#meta-documentation", 
            "text": "", 
            "title": "Meta Documentation"
        }, 
        {
            "location": "/about/meta/#documentation-about-the-documentation", 
            "text": ":laughing:    This set of documentation exists to promote a transparent and always available set of guides for developing, editing and improving the development of software in OCIO. This documentations' source code is available at\nhttps://github.com/SLAC-OCIO/dev-processes  If you're a member of the SLAC-OCIO Github organization, you can access and edit this documentation. We welcome all pull requests, subject to review.", 
            "title": "Documentation about the Documentation"
        }, 
        {
            "location": "/about/meta/#organization", 
            "text": "The documentation set (dset) is organized according to subject. The syntax of the documentation is Markdown, particularly  Github Markdown .   Note:   Location of the code repository:  SLAC OCIO Github    Request Access:  Service Now", 
            "title": "Organization"
        }, 
        {
            "location": "/about/meta/#repository-structure", 
            "text": "In the  documentation repository  there is a folder labeled 'Docs'\nThis is the primary folder for storing documentation files. In that folder are several others.  Each folder refers to a high-level topic or team.    - docs    core-team\n        - DRUPAL_UPGRADE_PROCESS.md\n        - VENDOR_DEPLOY.md\n        - VENDOR_PR.md\n        - overview.md   drupal    - COMS_GIT.md  - drupal-overview.md  - grail.md  - mamp-linux.md  - slac_sites.md", 
            "title": " Repository Structure"
        }, 
        {
            "location": "/about/meta/#documentation-creation-and-editing-process", 
            "text": "", 
            "title": "Documentation Creation and Editing Process"
        }, 
        {
            "location": "/about/meta/#create-a-document", 
            "text": "Clone the repository, locally.  Create a new branch with the appropriate branch name. and switch to it.  If you are adding a new subject, or team, create a new directory in the  docs  folder  If you are adding a new page to the current dset, be sure to create the page in the appropriate folder, and that the file suffix is  .md  and the file is written with proper Markdown syntax.   Once you have finished editing, create a commit message with a summary of your changes and push your changes remotely.", 
            "title": " Create a document"
        }, 
        {
            "location": "/about/meta/#edit-existing-document", 
            "text": "If you find mistakes, errors or something missing, you can edit any document in the repository.   Clone the repository, locally.  Create a new branch with the appropriate branch name. and switch to it.  Open the document in your preferred editor.  Make appropriate edits using Markdown syntax.  Save your document  Stage your changes  Commit your changes, with a summary of the changes you made, or the subject you edited.  Push your branch to GitHub  Login to Github, and issue a pull request.", 
            "title": " Edit  existing document"
        }, 
        {
            "location": "/about/meta/#rename-a-document", 
            "text": "Generally, the name doesn't matter - since we're using readthedocs.io, the structure is maintained via the yaml file in the root directory of the repository. If you do rename follow the steps in Edit existing document.", 
            "title": " Rename a document"
        }, 
        {
            "location": "/about/meta/#delete-a-document", 
            "text": "You can delete documents but it is generally advised to restructure or edit them instead. If documents are deleted that should be there, OCIO-Leads will restore it.", 
            "title": " Delete a document"
        }, 
        {
            "location": "/about/meta/#tools", 
            "text": "At the very least the following tools are needed:   git  installed locally   A text editor, in ascii mode.   A modern web browser    Note:   A great Git UI application called  GitKraken  is available.  It has a pleasant and intuitive UI, simplifies most operations and can perform pull request through Github. There is a no-cost version and a pro version.  For assistance with Git installation please see  Githubs Article on Git installation  Most code editors can edit markdown. Popular text editors include  Atom ,  Sublime Text ,  Notepad++ \nThrough implication - that you're reading this document - denotes you have a web browser.", 
            "title": "Tools"
        }, 
        {
            "location": "/about/meta/#publication", 
            "text": "Once you are happy with your document, and have saved it - you will need to insert it in the navigation tree of the  ReadTheDocs.io  site.", 
            "title": "Publication"
        }, 
        {
            "location": "/about/meta/#editing-mkdocsyml", 
            "text": "Open the  mkdocs.yml  file in the root directory of the repository you cloned.  Ignore (don't change) anything above the following:  pages:\n  - Home: index.md\n  - Drupal: \n    - 'Overview of Drupal at SLAC': 'drupal/drupal-overview.md'\n    - 'Local Development of Drupal': 'drupal/mamp-linux.md'\n    - 'OS-X Development Machine Configuration': 'drupal/grail.md'\n    - 'Communications  ---  Dev Processes': 'drupal/COMS_GIT.md'\n    - 'Up and Running with SLAC Sites': 'drupal/slac_sites.md'\n  - Core Team:\n    - 'Overview of Drupal for DevOps Team':  'core-team/overview.md'\n    - 'Deployment of Vendor Pull Request': 'core-team/VENDOR_PR.md'\n    - 'Deployment of Production from Vendor': 'core-team/VENDOR_DEPLOY.md'", 
            "title": " Editing mkdocs.yml"
        }, 
        {
            "location": "/about/meta/#new-teamproject", 
            "text": "Assuming you created a new folder (you should have) in the  docs  directory, create a new second level list item:  - Core Team:\n    - 'Overview of Drupal for DevOps Team':  'core-team/overview.md'\n    - 'Deployment of Vendor Pull Request': 'core-team/VENDOR_PR.md'\n    - 'Deployment of Production from Vendor': 'core-team/VENDOR_DEPLOY.md'\n- My New Project:\n    - 'Overview of My New Project': 'new-project/overview.md'\n    - 'Other interesting stuff': 'new-project/other.md'  You will see that I added  - My New Project:  as well as two 'pages' below the second level list item, and indented fours spaces, adding a  - .", 
            "title": "New Team/Project"
        }, 
        {
            "location": "/about/meta/#note", 
            "text": "There is never any reason for creating a top level list item. Please retain the structure already created  The syntax used in the yml or Yaml file can be further understood in  this article  This file is very syntax sensitive, so please follow the examples, we suggest cutting and pasting - then editing to suit your update.    The structure of the navigation is very simple, yet elegant. The top level list item:  pages  creates a list object for parsing. Second level items (home, drupal, core-team) are akin to main navigation items - these are subject to re-organization as time progresses and more projects are ported here.   The secondary level items should follow this convention:  - Section Name : \nTertiary level items should follow this convention:  - 'Subject of SubSection': 'second-level-label/file-name.md'  That's it - the yml file looks intimidating to a non-developer/non-coder, but is very simple and elegant.    Meta Documentation  Documentation about the Documentation  Organization   Repository Structure    Documentation Creation and Editing Process   Create a document   Edit  existing document   Rename a document   Delete a document    Tools  Publication   Editing mkdocs.yml  New Team/Project  Note:", 
            "title": "Note:"
        }, 
        {
            "location": "/drupal/drupal-overview/", 
            "text": "Drupal at SLAC\n\n\nSLAC\n employs \nDrupal\n as the informational website content management system\nObtaining Drupal Websites is simple, log in to \nService Now\n and create a ticket from the catalog.\n\n\nThis documentation system provides several groups within SLAC information about Drupal\n\n\nSLAC's Drupal Stack\n\n\n\n\nDrupal 7.xx\n\n\nPHP 5.4\n\n\nApache 2.4\n\n\nRedhat EL 6.5\n\n\n\n\nDrupal Customizations\n\n\n\n\nCustom modules written for SLAC are prefixed with \nslac_\n\n\nSLAC's Themes:\n\n\nwww6 - slac-www\n\n\nintranet - slac-igp\n\n\n\n\ngroup sites - slac\n\n\n\n\n\n\nSubthemes\n\n\n\n\next-org\n\n\nint-org\n\n\nprojects\n\n\npeople\n\n\n\n\n\n\n\n\nFront End markup\n\n\n\n\nSass\n\n\nCompass\n\n\nsusyone\n\n\n\n\n\n\n\n\n\n\n\n\nDevelopment Tools\n\n\nOS-X\n\n\n\n\nSLAC-OCIO has created a tool that enables a user to rapidly build the\n   necessary infrastructure to develop Drupal locally, that tool is\n   called \nGrail\n \n\n\nAcquia also has a   tool to manage Drupal sites on OS-X, it is called \nAcquia Dev Desktop\n\n\n\n\nThe MAMP stack can be manually configured on OS-X.  Configuration is\n   dependent largely on your operating system version. The Help Desk won't have the depth of knowledge to assist with custom MAMP stack configurations.\n\n\n\n\nOS-X 10.9\n \nGuide:\n Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.9 Mavericks\n\n\nOS-X 10.10\n \nGuide:\n Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.10 Yosemite\n\n\nOS-X 10.11\n \nGuide:\n Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.11 El Capitan\n\n\n\n\nMAMP stack: Mac, Apache web server, MySQL database server, PHP text interpreter\n\n\n\n\n\n\nLinux \n    - See Mamp Linux\n\n\nWindows\n\n\n Generally, it is possible to configure windows to develop an *AMP CMS.  However, it is beyond the scope to reliably re-produce the steps necessary.", 
            "title": "Overview of Drupal at SLAC"
        }, 
        {
            "location": "/drupal/drupal-overview/#drupal-at-slac", 
            "text": "SLAC  employs  Drupal  as the informational website content management system\nObtaining Drupal Websites is simple, log in to  Service Now  and create a ticket from the catalog.  This documentation system provides several groups within SLAC information about Drupal", 
            "title": "Drupal at SLAC"
        }, 
        {
            "location": "/drupal/drupal-overview/#slacs-drupal-stack", 
            "text": "Drupal 7.xx  PHP 5.4  Apache 2.4  Redhat EL 6.5", 
            "title": "SLAC's Drupal Stack"
        }, 
        {
            "location": "/drupal/drupal-overview/#drupal-customizations", 
            "text": "Custom modules written for SLAC are prefixed with  slac_  SLAC's Themes:  www6 - slac-www  intranet - slac-igp   group sites - slac    Subthemes   ext-org  int-org  projects  people     Front End markup   Sass  Compass  susyone", 
            "title": "Drupal Customizations"
        }, 
        {
            "location": "/drupal/drupal-overview/#development-tools", 
            "text": "OS-X   SLAC-OCIO has created a tool that enables a user to rapidly build the\n   necessary infrastructure to develop Drupal locally, that tool is\n   called  Grail    Acquia also has a   tool to manage Drupal sites on OS-X, it is called  Acquia Dev Desktop   The MAMP stack can be manually configured on OS-X.  Configuration is\n   dependent largely on your operating system version. The Help Desk won't have the depth of knowledge to assist with custom MAMP stack configurations.   OS-X 10.9\n  Guide:  Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.9 Mavericks  OS-X 10.10\n  Guide:  Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.10 Yosemite  OS-X 10.11\n  Guide:  Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.11 El Capitan   MAMP stack: Mac, Apache web server, MySQL database server, PHP text interpreter    Linux \n    - See Mamp Linux  Windows   Generally, it is possible to configure windows to develop an *AMP CMS.  However, it is beyond the scope to reliably re-produce the steps necessary.", 
            "title": "Development Tools"
        }, 
        {
            "location": "/drupal/mamp-linux/", 
            "text": "Before running through the steps of this tutorial, make sure that all of your repositories are up to date:\n\n\napt-get update\n\n\n\nWith that completed, go ahead and start installing the LAMP server.\n\n\nStep One\u2014Install Apache\n\n\nApache is a free open source software which runs over 50% of the world\u2019s web servers.\n\n\nTo install apache, open terminal and type in these commands:\n\n\napt-get install apache2\n\n\n\nThat\u2019s it. To check if Apache is installed on your VPS, direct your browser to your server\u2019s IP address (eg. http://12.34.56.789). The page should display the words \u201cIt works!\" like \nthis\n.\n\n\nHow to Find your Server\u2019s IP address\n\n\nYou can run the following command to reveal your VPS's IP address.\n\n\nifconfig eth0 | grep inet | awk '{ print $2 }'\n\n\n\nStep Two\u2014Install MySQL\n\n\nMySQL is a widely-deployed database management system used for organizing and retrieving data.\n\n\nTo install MySQL, open terminal and type in these commands:\n\n\napt-get install mysql-server\n\n\n\nDuring the installation, MySQL will ask you to set a root password. If you miss the chance to set the password while the program is installing, it is very easy to set the password later from within the MySQL shell.\n\n\nFinish up by running the MySQL set up script:\n\n\n mysql_secure_installation\n\n\n\nThe prompt will ask you for your current root password.\n\n\nType it in.\n\n\nEnter current password for root (enter for none): \nOK, successfully used password, moving on...\n\n\n\nThen the prompt will ask you if you want to change the root password. Go ahead and choose N and move on to the next steps.\n\n\nIt\u2019s easiest just to say Yes to all the options. At the end, MySQL will reload and implement the new changes.\n\n\nBy default, a MySQL installation has an anonymous user, allowing anyone\nto log into MySQL without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y                                            \n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n... Success!\n\nBy default, MySQL comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n\nCleaning up...\n\n\n\nOnce you're done with that you can finish up by installing PHP on your virtual server.\n\n\nStep Three\u2014Install PHP\n\n\nPHP is an open source web scripting language that is widely use to build dynamic webpages.\n\n\nTo install PHP, open terminal and type in this command. \nNote:\n If you are on a version earlier than Debian 7, include php5-suhosin as well.\n\n\n apt-get install php5 php-pear php5-mysql\n\n\n\nAfter you answer yes to the prompt twice, PHP will install itself.\n\n\nFinish up by restarting apache:\n\n\nservice apache2 restart\n\n\n\nCongratulations! You now have LAMP stack on your linux machine!\n\n\nStep Four\u2014RESULTS: See PHP on your Server\n\n\nAlthough LAMP is installed, we can still take a look and see the components online by creating a quick php info page\n\n\nTo set this up, first create a new file:\n\n\n nano /var/www/info.php\n\n\n\nAdd in the following line:\n\n\n\n\n\nThen Save and Exit.\n\n\nFinish up by visiting your php info page (make sure you replace the example ip address with your correct one): http://127.0.0.1/info.php\n\n\nIt should look something like this:", 
            "title": "Local Development of Drupal"
        }, 
        {
            "location": "/drupal/mamp-linux/#step-oneinstall-apache", 
            "text": "Apache is a free open source software which runs over 50% of the world\u2019s web servers.  To install apache, open terminal and type in these commands:  apt-get install apache2  That\u2019s it. To check if Apache is installed on your VPS, direct your browser to your server\u2019s IP address (eg. http://12.34.56.789). The page should display the words \u201cIt works!\" like  this .", 
            "title": "Step One\u2014Install Apache"
        }, 
        {
            "location": "/drupal/mamp-linux/#how-to-find-your-servers-ip-address", 
            "text": "You can run the following command to reveal your VPS's IP address.  ifconfig eth0 | grep inet | awk '{ print $2 }'", 
            "title": "How to Find your Server\u2019s IP address"
        }, 
        {
            "location": "/drupal/mamp-linux/#step-twoinstall-mysql", 
            "text": "MySQL is a widely-deployed database management system used for organizing and retrieving data.  To install MySQL, open terminal and type in these commands:  apt-get install mysql-server  During the installation, MySQL will ask you to set a root password. If you miss the chance to set the password while the program is installing, it is very easy to set the password later from within the MySQL shell.  Finish up by running the MySQL set up script:   mysql_secure_installation  The prompt will ask you for your current root password.  Type it in.  Enter current password for root (enter for none): \nOK, successfully used password, moving on...  Then the prompt will ask you if you want to change the root password. Go ahead and choose N and move on to the next steps.  It\u2019s easiest just to say Yes to all the options. At the end, MySQL will reload and implement the new changes.  By default, a MySQL installation has an anonymous user, allowing anyone\nto log into MySQL without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y                                            \n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n... Success!\n\nBy default, MySQL comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n\nCleaning up...  Once you're done with that you can finish up by installing PHP on your virtual server.", 
            "title": "Step Two\u2014Install MySQL"
        }, 
        {
            "location": "/drupal/mamp-linux/#step-threeinstall-php", 
            "text": "PHP is an open source web scripting language that is widely use to build dynamic webpages.  To install PHP, open terminal and type in this command.  Note:  If you are on a version earlier than Debian 7, include php5-suhosin as well.   apt-get install php5 php-pear php5-mysql  After you answer yes to the prompt twice, PHP will install itself.  Finish up by restarting apache:  service apache2 restart  Congratulations! You now have LAMP stack on your linux machine!", 
            "title": "Step Three\u2014Install PHP"
        }, 
        {
            "location": "/drupal/mamp-linux/#step-fourresults-see-php-on-your-server", 
            "text": "Although LAMP is installed, we can still take a look and see the components online by creating a quick php info page  To set this up, first create a new file:   nano /var/www/info.php  Add in the following line:   Then Save and Exit.  Finish up by visiting your php info page (make sure you replace the example ip address with your correct one): http://127.0.0.1/info.php  It should look something like this:", 
            "title": "Step Four\u2014RESULTS: See PHP on your Server"
        }, 
        {
            "location": "/drupal/grail/", 
            "text": "Grail\n\n\nGrail makes it easier to get started with a new Mac, or spruce up your current one.  It uses Ansible, Superlumic, Python and Git to pull together the apps, programs and libraries necessary to do application developement and System Administration on OS-X.\n\n\n\n\nBase packages for Python, Ruby, PHP, BASH enhancements, OS-X enhancments\n\n\nNode and Javascript packages, with multiple versions of node and nvm\n\n\nThe Drupal version includes compass and susyone\n\n\n\n\nRequirements\n\n\n\n\nOS-X 10.10 (Yosemite)  or\n\n\nOS-X 10-11 (El Capitan)\n\n\nInternet Connection\n\n\nThe ability to manage system level packages on your mac (sudo)\n\n\n\n\nProfiles\n\n\nThere are three profiles that can be utilized\n  - All - A standard set of applications for a new Mac\n  - Developer - An enhanced set of applications for common development uses\n  - Drupal - An all encompassing platform, designed to get the Drupal development Neophyte to the point of writing code and site-building\n\n\nRuntime\n\n\nOn a 2011 MacMini (Intel i5 dual-core) with 8GB of memory and a solid state drive, sitting on the fastest internet there is, this took 45 minutes to complete.  Your millage may vary. \n\n\nUsage\n\n\nTo utilize the package open a terminal app:\n\n\nClick Finder -\n in the Location bar at the top of your screen, click go -\n click Applications -\n Utilities -\n Terminal\n\n\nYou can also use Command+space -\n type terminal -\n type Enter\n\n\nCopy the line below (command+c) and paste it (command+v) into the terminal window and type enter\n\n\nProfile Choice\n\n\n\n\nIf you want the basic set of applications paste the following line into your terminal:\n\ncurl -s https://raw.githubusercontent.com/SLAC-OCIO/mac-dev-deployment/master/bootstrap.sh | bash -s all\n\n\nIf you want a developer ready machine, for node, python, java paste the following line into your terminal:\n\ncurl -s https://raw.githubusercontent.com/SLAC-OCIO/mac-dev-deployment/master/bootstrap.sh | bash -s admin\n\n\nIf you want to start developing Drupal, using SLAC's codebases paste the following line into your terminal:\n\ncurl -s https://raw.githubusercontent.com/SLAC-OCIO/mac-dev-deployment/master/bootstrap.sh | bash -s drupal\n\n\nCaveats: There may be some timeouts with Homebrew and random packages.Should you experience timeouts, or failures due to timeouts please re-run the above command.\n\n\nYou will know you are finished with you see the following:\n\n\nlocalhost: xxx xxxxx xxxx xxxx failed=0\n\n\nPay close attention to the \nfailed=0\n as that means everything completed.\nIf you encounter errors run the command again, if you repeatedly encounter them, file a ticket in Service Now.\n\n\nYou may see warnings and errors, they are generally safe to ignore.\nAs with all software, please examine the source before running a command a guy in a lab tells you to.\n\n\nFor advanced documentation see the \nWiki\n\n\nSLAC Drupal Developers should read the primer \nSLAC Sitesup and Running\n It details getting setup with an IDE, and initializing new test sites.\n\n\nAbout\n\n\nThis is a package developed to assist Developers that are new to Drupal, get the toolchain in place to develop locally using a Macintosh Computer running OS-X 10.10 or higher.\n\n\nLargely, it was designed to be self-contained, pulling from other projects only when necessary. However, SLAC Drupal Developers will need credentials in place (ssh keys) to utilize the scripts that download the private Drupal repositories.\n\n\nIf you're not a SLAC Drupal developer, the extra scripts that are not ran by bootstrap.sh, won't interest you - other than academically to see how I accomplished it.\n\n\nThe documentation in the PDF was pulled from Github and Drupal's support sections.  I take no credit for it's writing, but merely arranging it in a downloadable document.\n\n\nWe acknowledge that there are enterprise alternatives - however, a lack of resources dictates that we get this working, so others can begin developing. \n\n\nOrigin\n\n\nThe initial need for Grail was born out of team consolidation.  The boss wanted us to crosstrain.  Getting started with Drupal development is a challenge as the toolchain required has a learning curve.  This pacakge speeds up the cross team integration. \n\n\nIt is composed of several tricks from several bags. Many of the roles come from \nSuperlumic\n That package was developed with a lot of extensability in mind. I initially started with \nBattleschool\n, but found it was restricting me for my usecase. Either of them are great pacakges - I've tried to draw from both of them. I changed a few things that let us use this in Casper. I added some scripts that let the intrepid user grab all of the codebases. \n\n\nContributors\n\n- Vincent Flesouras \nabout me\n  \nGithub Profile\n\n- Adam Duston \nGithub Profile\n\n\n-xalg", 
            "title": "OS-X Development Machine Configuration"
        }, 
        {
            "location": "/drupal/grail/#grail", 
            "text": "Grail makes it easier to get started with a new Mac, or spruce up your current one.  It uses Ansible, Superlumic, Python and Git to pull together the apps, programs and libraries necessary to do application developement and System Administration on OS-X.   Base packages for Python, Ruby, PHP, BASH enhancements, OS-X enhancments  Node and Javascript packages, with multiple versions of node and nvm  The Drupal version includes compass and susyone", 
            "title": "Grail"
        }, 
        {
            "location": "/drupal/grail/#requirements", 
            "text": "OS-X 10.10 (Yosemite)  or  OS-X 10-11 (El Capitan)  Internet Connection  The ability to manage system level packages on your mac (sudo)", 
            "title": "Requirements"
        }, 
        {
            "location": "/drupal/grail/#profiles", 
            "text": "There are three profiles that can be utilized\n  - All - A standard set of applications for a new Mac\n  - Developer - An enhanced set of applications for common development uses\n  - Drupal - An all encompassing platform, designed to get the Drupal development Neophyte to the point of writing code and site-building", 
            "title": "Profiles"
        }, 
        {
            "location": "/drupal/grail/#runtime", 
            "text": "On a 2011 MacMini (Intel i5 dual-core) with 8GB of memory and a solid state drive, sitting on the fastest internet there is, this took 45 minutes to complete.  Your millage may vary.", 
            "title": "Runtime"
        }, 
        {
            "location": "/drupal/grail/#usage", 
            "text": "To utilize the package open a terminal app:  Click Finder -  in the Location bar at the top of your screen, click go -  click Applications -  Utilities -  Terminal  You can also use Command+space -  type terminal -  type Enter  Copy the line below (command+c) and paste it (command+v) into the terminal window and type enter", 
            "title": "Usage"
        }, 
        {
            "location": "/drupal/grail/#profile-choice", 
            "text": "If you want the basic set of applications paste the following line into your terminal: curl -s https://raw.githubusercontent.com/SLAC-OCIO/mac-dev-deployment/master/bootstrap.sh | bash -s all  If you want a developer ready machine, for node, python, java paste the following line into your terminal: curl -s https://raw.githubusercontent.com/SLAC-OCIO/mac-dev-deployment/master/bootstrap.sh | bash -s admin  If you want to start developing Drupal, using SLAC's codebases paste the following line into your terminal: curl -s https://raw.githubusercontent.com/SLAC-OCIO/mac-dev-deployment/master/bootstrap.sh | bash -s drupal  Caveats: There may be some timeouts with Homebrew and random packages.Should you experience timeouts, or failures due to timeouts please re-run the above command.  You will know you are finished with you see the following:  localhost: xxx xxxxx xxxx xxxx failed=0  Pay close attention to the  failed=0  as that means everything completed.\nIf you encounter errors run the command again, if you repeatedly encounter them, file a ticket in Service Now.  You may see warnings and errors, they are generally safe to ignore.\nAs with all software, please examine the source before running a command a guy in a lab tells you to.  For advanced documentation see the  Wiki  SLAC Drupal Developers should read the primer  SLAC Sitesup and Running  It details getting setup with an IDE, and initializing new test sites.", 
            "title": "Profile Choice"
        }, 
        {
            "location": "/drupal/grail/#about", 
            "text": "This is a package developed to assist Developers that are new to Drupal, get the toolchain in place to develop locally using a Macintosh Computer running OS-X 10.10 or higher.  Largely, it was designed to be self-contained, pulling from other projects only when necessary. However, SLAC Drupal Developers will need credentials in place (ssh keys) to utilize the scripts that download the private Drupal repositories.  If you're not a SLAC Drupal developer, the extra scripts that are not ran by bootstrap.sh, won't interest you - other than academically to see how I accomplished it.  The documentation in the PDF was pulled from Github and Drupal's support sections.  I take no credit for it's writing, but merely arranging it in a downloadable document.  We acknowledge that there are enterprise alternatives - however, a lack of resources dictates that we get this working, so others can begin developing.", 
            "title": "About"
        }, 
        {
            "location": "/drupal/grail/#origin", 
            "text": "The initial need for Grail was born out of team consolidation.  The boss wanted us to crosstrain.  Getting started with Drupal development is a challenge as the toolchain required has a learning curve.  This pacakge speeds up the cross team integration.   It is composed of several tricks from several bags. Many of the roles come from  Superlumic  That package was developed with a lot of extensability in mind. I initially started with  Battleschool , but found it was restricting me for my usecase. Either of them are great pacakges - I've tried to draw from both of them. I changed a few things that let us use this in Casper. I added some scripts that let the intrepid user grab all of the codebases.   Contributors \n- Vincent Flesouras  about me    Github Profile \n- Adam Duston  Github Profile  -xalg", 
            "title": "Origin"
        }, 
        {
            "location": "/drupal/COMS_GIT/", 
            "text": "requirements\n\n     - ssh-keys\n     - Github account\n     - Mac or Linux computer\n     - sudo or 'administrator' privileges\n     - 20 GB of free Hard Disk space\n\n\nGeneral Steps\n\n\n\n\nSetup your local machine to develop in the MAMP 'stack' - Mac Apache MySQL PHP (One time process) Document forthcoming, or use Grail if OS-X\n\n\nGet code location - Github Repository URL\n\n\nPull code to your machine - Git Pull\n\n\nCreate 'sandbox' - Git branch\n\n\nModify your code\n\n\nStage your code - Git add\n\n\nPush your code to Github - Git push\n\n\nRequest Deployment - Service Now\n\n\nTest\n\n\nRequest Merge via Pull Request - Github Interface\n\n\nFetch all Changes, Switch branch back to master - Git fetch\n\n\n\n\nssh keys\n\n\n\n\nGenerate your Key: https://help.github.com/articles/generating-an-ssh-key/\n\n\nInstall your Pub Key in github:https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\n\n\n\n\nGithub Account\n\n\n\n\nObtain a github account by signing up, it is free.\n\n\nVia Service Now - request having your user added to SLAC-OCIO Github\n\n\nEnsure that your ssh public key is configured in Github\n\n\n\n\nObtain the repository url eg: (git@github.com/SLAC-OCIO/slac-features.git)\n\n\n\n\nLog into Github.\n\n\nOpen the SLAC-OCIO organization from the Org Dropdown. Located in the upper left of the webpage, under the picture of the \"Octokitty\"\n\n\nBrowse through the available repositories until you find the one you want.  You can use the Search Bar, located above the Organization dropdown and next to the \"Octokitty\"\n\n\nClick on the title of the Github repository you wish to work on.\n\n\nClick the green \"Clone or Download\" button in the upper right area of the webpage.\n\n\nSelect \"SSH\" by clicking on the word\n\n\nCopy the URL to your clipboard\n\n\n\n\nPull code to your machine\n\n\n\n\nOpen the terminal application (command+space, type terminal, enter)\n    On OS X, the Terminal application can be found in /Applications/Utilities. Open a Finder window and go to Applications, then Utilities. Then double click on Terminal. (Or, click the spotlight icon in the upper right hand corner of your screen and type Terminal \u2013 you should see Terminal under Applications.)\n\n\nChange directories to your sandbox website [cd ~/sites/]\n\n\n\n\nClone your repository: \ngit clone git@github.com:SLAC-OCIO/slac-features.git\n\n\n\n\n\n\nChange directory to your new codebase: cd  ~/sites/slac-features\n\n\n\n\n\n\nCreate your Sandbox\n\n\n\n\nCreate a branch of the main tree to change code in: \ngit checkout -b yourbranchname\n\n\nEnsure you're on the correct branch \ngit status\n\n\n\n\nModify your code\n\nCode, Create!, Be happy, Don't forget the semi-colon!\n\n\nStage your code\n\n\n\n\nOpen the terminal application (command+space, type terminal, or type iTerm, hit enter)\n\n\nChange directories to your sandbox website [cd ~/sites/slac-features]\n\n\nLook at the needed changes: \ngit status\n  Likely, you'll see a listing of files, some will be added, some deleted, some modified. Some will be in the \"Untracked Files\" section, we do not want to add these.\n\n\nAdd everything in the list above untracked files.  You may add an entire folder, like:\n\n\ngit add sites/all/themes/slac/_sass/\n\n\n\n\n\n\nOnce your files are staged for upload, you'll create a commit message\n\n\ngit commit -m \"I added padding to the new news block\"\n\n\n\n\n\n\n\n\n Push your code to Github \n\n\n\n\nOpen the terminal application (command+space, type terminal, enter)\n\n\nChange directories to your sandbox website [cd ~/sites/slac-features]\n\n\nEnsure you're on the correct branch: \ngit status -v -a\n\n\nPush your code to the central repository in the cloud: \ngit push origin yourbranchname\n\n\nEnsure you have the latest changes in your local filesystem: \ngit fetch\n then \ngit pull master\n\n\n\n\nRequest Deployment to Staging\n\n\n\n\nOpen Service now, select Service Catalog\n\n\nSelect Other Request, in the title, preface with [github staging]\n\n\nSubmit\n\n\n\n\nRequest merge via pull request\n\n\n\n\nLog into Github.\n\n\nOpen the SLAC-OCIO organization from the Org select list. Located in the upper left of the webpage, under the picture of the \"Octokitty\"\n\n\nBrowse through the available repositories until you find the one you want.  You can use the Search Bar, located above the Organization dropdown and next to the \"Octokitty\"\n\n\nClick on the title of the Github repository you wish to work on.\n\n\nClick the \"Branch\" select menu\n\n\nChose the branch you're working with, click it.\n\n\nIn the branch commit status bar (blue background) select 'Pull request\"\n\n\nIn the comment field, write short synopsis of the changes you have made to the code\n\n\nClick on 'Create Pull Request' button, when finished with your synopsis\n\n\n\n\nFetch all changes to your local filesystem\n\n\n\n\nOpen the terminal application (command+space, type terminal, or type iTerm, hit enter)\n    On OS X, the Terminal application can be found in /Applications/Utilities. Open a Finder window and go to Applications, then Utilities. Then double click on Terminal. (Or, click the spotlight icon in the upper right hand corner of your screen and type Terminal \u2013 you should see Terminal under Applications.)\n\n\nChange directories to your sandbox website [cd ~/sites/slac-features]\n\n\nFetch the changes: \ngit fetch", 
            "title": "Communications <---> Dev Processes"
        }, 
        {
            "location": "/drupal/slac_sites/", 
            "text": "Getting started with Development on SLAC Websites\n\n\nLoading Code as a Project\n\n\nOpen your preferred IDE (PHPStorm, Sublime Text or Atom)\n\n\nIf using PHPStorm\n, chose 'Open' once you load PHPStorm\n\n\nIf you're working on a SLAC site installed via this script, and you used default settings, your sites are located in \n/var/sites/sitename\n\n\nUse PHPStorm finder utility to descend directories to \n/var/www/slac-features\n\n\nSelect 'Ok' This will load the project into the PHPStorm window. At this point, you're ready to start coding.\n\n\nYour website should be reachable by loading a browser and entering \nhttp://slac-features/\n into the address field. Remember the trailing slash.\n\n\nIf using Sublime Text\n chose File \n Open and browse to your directory \n/var/sites/slac-features\n\n\nEnsuring you have the directory selected, click 'Open'\n\n\nReaching your website is the same for PHPstorm\n\n\nAdding a new site for local development\n\n\nCodebase\n\n\nBegin by cloning the repository that contains the repository you're working with. We'll be working with the \nSLAC Features\n codebase\n\n\nCloning to the \n/var/sites/\n directory is recommended.\n\n\nI'm going to create a site named 'slac-ext' So, the command to clone slac-ext would be: \n\n\n$ git clone https://github.com/SLAC-OCIO/slac-features.git /var/sites/slac-ext\n\n\nWebserver Configuration\n\n\nNow we'll setup the necessary local webserver configuration.\n\n\nIncluded in the Grail package is a script, named \nvirtualhost.sh\n it is located in your bin directory \n/Users/yourusername/bin\n\n\nOpen a terminal (Command + Space, type 'terminal' hit enter)\n\n\nYou'll enter the path to the script and give it parameters.\n\n\nFor example, were I to setup my local machine to load a site called 'slac-ext', in the terminal I would enter:\n\n\n$ ~/bin/virtualhost.sh slac-ext\n\n\nYou will receive output that resembles the following:\n\n\nEnter your password to continue...\nPassword:\nCreate http://slac-ext:80/? [Y/n]: y\nCreating a virtualhost for slac-ext...\n+ Adding slac-ext to /etc/hosts... done\n+ Looking in /var/sites for an existing document root to use...\n  searching to a maximum directory depth of 2. This could take some time...\n  - Use /var/sites/slac-ext as the virtualhost folder? [Y/n] /var/sites/slac-ext\n  + Creating folder /var/sites/slac-ext... done\n+ Creating 'index.html'... done\n+ Creating virtualhost file... done\n+ Flushing cache... done\n+ Restarting Apache... done\n\nhttp://slac-ext:80/ is set up and ready for use.\n\n\n\n\nDatabase and Site Initialization\n\n\nSo far you have retrieved the codebase and configured the local webserver.Next we'll need to setup the database. \n\n\nLocal Sites Settings\n\n\nEvery Drupal site needs a settings file. This file is called \nsettings.php\n for single websites it is located in /\nsitename\n/sites/default/settings.php. \n\n\nI've included a pre-configured copy for you to use, it is distributed with Grail, you can find it in:\n\n\n/usr/local/grail/roles/slac.grail-sites-build/files\n\n\n.../roles/slac.grail-sites-build/files]$ \u2620 ls\nIcon?                      slac-features.settings.php slac-gtw.settings.php      slac-www.settings.php\n\n\n\n\nWe'll use slac-features.settings.php. You'll copy this file to your website.\n\n\n$ cp /usr/local/grail/roles/slac.grail-slac-sites-build/files/slac-features.settings.php /var/sites/slac-ext/sites/default/settings.php\n\n\nSite Initialization\n\n\nSlac-Features includes some PHP scripts that build slac-features profile - preparing them with default demo content and settings.  \n\n\nThey reside in \n/var/sites/_sitename_/rebuild\n\n\n\n\n\n\n\n\n- slac_ext_org.php\n\n\nbuilds/rebuilds the SLAC External Profile\n\n\n\n\n\n\n\n\n\n\n- slac_misc.php\n\n\nbuilds/rebuilds the SLAC Misc Profile\n\n\n\n\n\n\n- slac_people.php\n\n\nbuilds/rebuilds the SLAC People Profile\n\n\n\n\n\n\n- slac_project.php\n\n\nbuilds/rebuilds the SLAC Project Profile\n\n\n\n\n\n\n\n\nInvoking one of these files, in the website directory will build the database and configure the website. In that process, it disables Webauth and slac_login to enable local development.\n\n\nWe invoke that file by doing the following:\n\n\n$ cd /var/sites/slac-ext/rebuild\n$ /usr/local/bin/php slac_ext_org.php\n\n\n\n\nYou may see some errors concerning \nDate()\n, these are safe to ignore, on a local development environment.\nIf you encounter warnings, disregard them.\nIf the build fails, re-run it again.\n\n\nYou will know it has been successful when your browser initializes - either with a new window or new tab, and shows the current site you're building, and logs you in.\n\n\nSummary\n\n\nThis guide is by no means exhaustive. There are several places that this process can encounter errors. This document is given as a primer, and distributed with a larger package that builds a local development environment, design to get newer and less experienced Drupal Devlopers started.  If you encounter errors, please file an issue on github.", 
            "title": "Up and Running with SLAC Sites"
        }, 
        {
            "location": "/drupal/slac_sites/#getting-started-with-development-on-slac-websites", 
            "text": "", 
            "title": "Getting started with Development on SLAC Websites"
        }, 
        {
            "location": "/drupal/slac_sites/#loading-code-as-a-project", 
            "text": "Open your preferred IDE (PHPStorm, Sublime Text or Atom)  If using PHPStorm , chose 'Open' once you load PHPStorm  If you're working on a SLAC site installed via this script, and you used default settings, your sites are located in  /var/sites/sitename  Use PHPStorm finder utility to descend directories to  /var/www/slac-features  Select 'Ok' This will load the project into the PHPStorm window. At this point, you're ready to start coding.  Your website should be reachable by loading a browser and entering  http://slac-features/  into the address field. Remember the trailing slash.  If using Sublime Text  chose File   Open and browse to your directory  /var/sites/slac-features  Ensuring you have the directory selected, click 'Open'  Reaching your website is the same for PHPstorm", 
            "title": "Loading Code as a Project"
        }, 
        {
            "location": "/drupal/slac_sites/#adding-a-new-site-for-local-development", 
            "text": "Codebase  Begin by cloning the repository that contains the repository you're working with. We'll be working with the  SLAC Features  codebase  Cloning to the  /var/sites/  directory is recommended.  I'm going to create a site named 'slac-ext' So, the command to clone slac-ext would be:   $ git clone https://github.com/SLAC-OCIO/slac-features.git /var/sites/slac-ext  Webserver Configuration  Now we'll setup the necessary local webserver configuration.  Included in the Grail package is a script, named  virtualhost.sh  it is located in your bin directory  /Users/yourusername/bin  Open a terminal (Command + Space, type 'terminal' hit enter)  You'll enter the path to the script and give it parameters.  For example, were I to setup my local machine to load a site called 'slac-ext', in the terminal I would enter:  $ ~/bin/virtualhost.sh slac-ext  You will receive output that resembles the following:  Enter your password to continue...\nPassword:\nCreate http://slac-ext:80/? [Y/n]: y\nCreating a virtualhost for slac-ext...\n+ Adding slac-ext to /etc/hosts... done\n+ Looking in /var/sites for an existing document root to use...\n  searching to a maximum directory depth of 2. This could take some time...\n  - Use /var/sites/slac-ext as the virtualhost folder? [Y/n] /var/sites/slac-ext\n  + Creating folder /var/sites/slac-ext... done\n+ Creating 'index.html'... done\n+ Creating virtualhost file... done\n+ Flushing cache... done\n+ Restarting Apache... done\n\nhttp://slac-ext:80/ is set up and ready for use.  Database and Site Initialization  So far you have retrieved the codebase and configured the local webserver.Next we'll need to setup the database.   Local Sites Settings  Every Drupal site needs a settings file. This file is called  settings.php  for single websites it is located in / sitename /sites/default/settings.php.   I've included a pre-configured copy for you to use, it is distributed with Grail, you can find it in:  /usr/local/grail/roles/slac.grail-sites-build/files  .../roles/slac.grail-sites-build/files]$ \u2620 ls\nIcon?                      slac-features.settings.php slac-gtw.settings.php      slac-www.settings.php  We'll use slac-features.settings.php. You'll copy this file to your website.  $ cp /usr/local/grail/roles/slac.grail-slac-sites-build/files/slac-features.settings.php /var/sites/slac-ext/sites/default/settings.php  Site Initialization  Slac-Features includes some PHP scripts that build slac-features profile - preparing them with default demo content and settings.    They reside in  /var/sites/_sitename_/rebuild     - slac_ext_org.php  builds/rebuilds the SLAC External Profile      - slac_misc.php  builds/rebuilds the SLAC Misc Profile    - slac_people.php  builds/rebuilds the SLAC People Profile    - slac_project.php  builds/rebuilds the SLAC Project Profile     Invoking one of these files, in the website directory will build the database and configure the website. In that process, it disables Webauth and slac_login to enable local development.  We invoke that file by doing the following:  $ cd /var/sites/slac-ext/rebuild\n$ /usr/local/bin/php slac_ext_org.php  You may see some errors concerning  Date() , these are safe to ignore, on a local development environment.\nIf you encounter warnings, disregard them.\nIf the build fails, re-run it again.  You will know it has been successful when your browser initializes - either with a new window or new tab, and shows the current site you're building, and logs you in.", 
            "title": "Adding a new site for local development"
        }, 
        {
            "location": "/drupal/slac_sites/#summary", 
            "text": "This guide is by no means exhaustive. There are several places that this process can encounter errors. This document is given as a primer, and distributed with a larger package that builds a local development environment, design to get newer and less experienced Drupal Devlopers started.  If you encounter errors, please file an issue on github.", 
            "title": "Summary"
        }, 
        {
            "location": "/core-team/overview/", 
            "text": "Drupal at SLAC\n\n\nSLAC\n employs \nDrupal\n as the informational website content management system\nObtaining Drupal Websites is simple, log in to \nService Now\n and create a ticket from the catalog.\n\n\nThis documentation system provides several groups within SLAC information about Drupal\n\n\nSLAC's Drupal Stack\n\n\n\n\nDrupal 7.xx\n\n\nPHP 5.4\n\n\nApache 2.4\n\n\nRedhat EL 6.5\n\n\n\n\nDrupal Customizations\n\n\n\n\nCustom modules written for SLAC are prefixed with \nslac_\n\n\nSLAC's Themes:\n\n\nwww6 - slac-www\n\n\nintranet - slac-igp\n\n\n\n\ngroup sites - slac\n\n\n\n\n\n\nSubthemes\n\n\n\n\next-org\n\n\nint-org\n\n\nprojects\n\n\npeople\n\n\n\n\n\n\n\n\nFront End markup\n\n\n\n\nSass\n\n\nCompass\n\n\nsusyone\n\n\n\n\n\n\n\n\n\n\n\n\nDevelopment Tools\n\n\nOS-X\n\n\n\n\nSLAC-OCIO has created a tool that enables a user to rapidly build the\n   necessary infrastructure to develop Drupal locally, that tool is\n   called \nGrail\n \n\n\nAcquia also has a   tool to manage Drupal sites on OS-X, it is called \nAcquia Dev Desktop\n\n\n\n\nThe MAMP stack can be manually configured on OS-X.  Configuration is\n   dependent largely on your operating system version. The Help Desk won't have the depth of knowledge to assist with custom MAMP stack configurations.\n\n\n\n\nOS-X 10.9\n \nGuide:\n Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.9 Mavericks\n\n\nOS-X 10.10\n \nGuide:\n Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.10 Yosemite\n\n\nOS-X 10.11\n \nGuide:\n Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.11 El Capitan\n\n\n\n\nMAMP stack: Mac, Apache web server, MySQL database server, PHP text interpreter\n\n\n\n\n\n\nLinux \n    - See Mamp Linux\n\n\nWindows\n\n\n Generally, it is possible to configure windows to develop an *AMP CMS.  However, it is beyond the scope to reliably re-produce the steps necessary.", 
            "title": "Overview of Drupal for DevOps Team"
        }, 
        {
            "location": "/core-team/overview/#drupal-at-slac", 
            "text": "SLAC  employs  Drupal  as the informational website content management system\nObtaining Drupal Websites is simple, log in to  Service Now  and create a ticket from the catalog.  This documentation system provides several groups within SLAC information about Drupal", 
            "title": "Drupal at SLAC"
        }, 
        {
            "location": "/core-team/overview/#slacs-drupal-stack", 
            "text": "Drupal 7.xx  PHP 5.4  Apache 2.4  Redhat EL 6.5", 
            "title": "SLAC's Drupal Stack"
        }, 
        {
            "location": "/core-team/overview/#drupal-customizations", 
            "text": "Custom modules written for SLAC are prefixed with  slac_  SLAC's Themes:  www6 - slac-www  intranet - slac-igp   group sites - slac    Subthemes   ext-org  int-org  projects  people     Front End markup   Sass  Compass  susyone", 
            "title": "Drupal Customizations"
        }, 
        {
            "location": "/core-team/overview/#development-tools", 
            "text": "OS-X   SLAC-OCIO has created a tool that enables a user to rapidly build the\n   necessary infrastructure to develop Drupal locally, that tool is\n   called  Grail    Acquia also has a   tool to manage Drupal sites on OS-X, it is called  Acquia Dev Desktop   The MAMP stack can be manually configured on OS-X.  Configuration is\n   dependent largely on your operating system version. The Help Desk won't have the depth of knowledge to assist with custom MAMP stack configurations.   OS-X 10.9\n  Guide:  Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.9 Mavericks  OS-X 10.10\n  Guide:  Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.10 Yosemite  OS-X 10.11\n  Guide:  Get Apache, MySQL, PHP and phpMyAdmin working on OSX 10.11 El Capitan   MAMP stack: Mac, Apache web server, MySQL database server, PHP text interpreter    Linux \n    - See Mamp Linux  Windows   Generally, it is possible to configure windows to develop an *AMP CMS.  However, it is beyond the scope to reliably re-produce the steps necessary.", 
            "title": "Development Tools"
        }, 
        {
            "location": "/core-team/VENDOR_PR/", 
            "text": "Processing a Github Pull Request\n\n\n\n\nThis document covers performing a pull request, this does not cover\nthe code review as that is far beyond the purview of this limited\ndocument to cover all of the drupal framework and php. That knowledge\nis essential to understanding the steps the vendor took and the ways\nin which they altered our environment and sites. However, it may be\nnecessary at times to process a pull request. Processing pull requests\nwithout code reviews is risky, in that we may find ourselves with\nsecurity problems, or unable to comprehend how or what a vendor\ncompleted for us.\n\n\nAll pull requests are initiated from the github UI.\n\n\n\n\n\n\n\n\nThe vendor/developer will issue a pull request.\n\n\n\n\n\n\nThe pull request will be present in github.  Github web UI is the safest place to process it, as they have automated tools that check if it can be automatically merged. If it can\u2019t be automatically merged, refuse the pull request.\nYou can find notifications of pull requests either in email or the page you\u2019re redirected to, after login to the github website.\n\n\n\n\n\n\nTo merge click the button merge button.\n\n\n\n\n\n\nTo decline, enter the reason for the declination and simply close the PR\n\n\n\n\n\n\nOnce the merge is completed, login through the terminal to drupal-admin01.\n\n\n\n\n\n\nEnsure you sudo as aegir. !!!!!DO NOT DO A PULL AS YOUR USER!!!!!  sudo -iu aegir\n Switch to the directory that contains the platform you\u2019re updating with new code with.\nrun git status:  This will print the current branch you\u2019re on.\n\n\n\n\n\n\nEnsure you have sudo\u2019d as aegir!\n\n\n\n\n\n\ngit pull origin yourbranchname\n\n\n\n\n\n\nSwitch to aegir UI (aegir.slac.stanford.edu)\n\n\n\n\nSelect the platform you\u2019re updating and verify it.\n\n\n\n\nOnce that is successful, select the sites and verify them.\n\n\n\n\n\n\nOnce verify is complete, go back to the command line, in drupal-admin01\n\n\n\n\n\n\nIn each site directory you will run the following commands utilizing the drush alias.\n\n\n\n\nupdb -y\nfra -y\nfra -y\nfl\ncc all\n\n\nPreface each of those commands with \u2018drush @sitealias \u2026.`\n\n\n\n\nWhen running the \u2018fl\u2019 command ensure that the state listed for each feature is empty. If it says overridden, then you must run fra (Features Revert All) until it no longer says overridden. If it keeps doing so, alert the vendor.\n\n\n\n\n\n\nAll of the code and features should be ready on the various sites.  Make sure to clear caches (drush @sitealias cc all) This effectively restarts the site.\n\n\n\n\n\n\nTest each site you have updated.", 
            "title": "Deployment of Vendor Pull Request"
        }, 
        {
            "location": "/core-team/VENDOR_PR/#processing-a-github-pull-request", 
            "text": "This document covers performing a pull request, this does not cover\nthe code review as that is far beyond the purview of this limited\ndocument to cover all of the drupal framework and php. That knowledge\nis essential to understanding the steps the vendor took and the ways\nin which they altered our environment and sites. However, it may be\nnecessary at times to process a pull request. Processing pull requests\nwithout code reviews is risky, in that we may find ourselves with\nsecurity problems, or unable to comprehend how or what a vendor\ncompleted for us.  All pull requests are initiated from the github UI.     The vendor/developer will issue a pull request.    The pull request will be present in github.  Github web UI is the safest place to process it, as they have automated tools that check if it can be automatically merged. If it can\u2019t be automatically merged, refuse the pull request.\nYou can find notifications of pull requests either in email or the page you\u2019re redirected to, after login to the github website.    To merge click the button merge button.    To decline, enter the reason for the declination and simply close the PR    Once the merge is completed, login through the terminal to drupal-admin01.    Ensure you sudo as aegir. !!!!!DO NOT DO A PULL AS YOUR USER!!!!!  sudo -iu aegir\n Switch to the directory that contains the platform you\u2019re updating with new code with.\nrun git status:  This will print the current branch you\u2019re on.    Ensure you have sudo\u2019d as aegir!    git pull origin yourbranchname    Switch to aegir UI (aegir.slac.stanford.edu)   Select the platform you\u2019re updating and verify it.   Once that is successful, select the sites and verify them.    Once verify is complete, go back to the command line, in drupal-admin01    In each site directory you will run the following commands utilizing the drush alias.   updb -y\nfra -y\nfra -y\nfl\ncc all  Preface each of those commands with \u2018drush @sitealias \u2026.`   When running the \u2018fl\u2019 command ensure that the state listed for each feature is empty. If it says overridden, then you must run fra (Features Revert All) until it no longer says overridden. If it keeps doing so, alert the vendor.    All of the code and features should be ready on the various sites.  Make sure to clear caches (drush @sitealias cc all) This effectively restarts the site.    Test each site you have updated.", 
            "title": "Processing a Github Pull Request"
        }, 
        {
            "location": "/core-team/VENDOR_DEPLOY/", 
            "text": "Vendor delivered Pull request and deployment\n\n\n\n\nWhen working with an external vendor, the following process has been tested and found to be very effective and eliminate many issues in the deployment pipeline.  With SLAC's Aegir deployment mechanism, the process is very simple, just follow the steps below.\n\n\n\n\n\n\nVendor initiates a pull request.\n\n\nLogin to github, review pull request.\n\n\n\n\nThis entails looking over the code, to ensure there is nothing that violates our security standards, or will have a negative impact on our platforms.\n\n\n\n\n\n\nMerge pull request by logging into drupal-admin01, changing directories to the appropriate platform/site directory. git pull origin branchname.\n\n\n\n\n\n\nSwitch to Aegir UI, verify the platfrom.\n\n\n\n\nVerify each site in the platform.\n\n\nRun database updates for each site.\n\n\nRun features updates for each site.\n\n\n\n\nRun cache clear for each site.\u200b\n\n\n\n\n\n\nImport prod database.\n\n\n\n\ndrush sql-cli \n ~/path/to/filename.sql\n\n\nReview pull request in github.\n\n\nIf there are conflicts in the pull request, do not proceed to step 2.Vendor Alert the developer.\n\n\nProcess the pull request and merge with the codedebase in the proper branch\n\n\nSSH into drupal admin01 and change directory to the proper platform folder\n\n\nkinit on login \n/usr/local/bin/kinit\n\n\nChange user to Aegir and kinit again\n\n\nsudo su - aegir\n\n\n/usr/local/bin/kinit yourusername\n\n\nDiscover and verify your branch\n\n\ngit status'  -tells you the correct branch (precaution\n\n\nRetrieve the newest code \n\n\ngit pull origin branchname\n\n\n\n\n\n\nLog into aegir UI - click on the platform you are updating.\n\n\nverify platform\n\n\nverify sites\n\n\nObtain the AFS directory numbers from each sites detail page in Aegir\n\n\nBack to the command line - \n\n\nCopy the files from the old drupal 6 site\n \nrsync -rave \u201cssh\u201d youruser@drupal02.slac.stanford.edu:/u1/www/html/sites/default/files/ /afs/slac.stanford.edu/g/web/drupal/xxxx/files/\n\n\n\n\n\n\nChange the file permissions to the correct schema \n\n\nchangingmod o+w *\n\n\nUpdate Database\n\n\ndrush updb -y\n\n\nRevert Features\n\n\ndrush fra -y\n\n\ndrush fra -y\n\n\ndrush cc all\n\n\ndrush fl\n\n\nReport back to verifyndor that the steps necessary have been performed on SLAC\u2019s side", 
            "title": "Deployment of Production from Vendor"
        }, 
        {
            "location": "/core-team/VENDOR_DEPLOY/#vendor-delivered-pull-request-and-deployment", 
            "text": "When working with an external vendor, the following process has been tested and found to be very effective and eliminate many issues in the deployment pipeline.  With SLAC's Aegir deployment mechanism, the process is very simple, just follow the steps below.    Vendor initiates a pull request.  Login to github, review pull request.   This entails looking over the code, to ensure there is nothing that violates our security standards, or will have a negative impact on our platforms.    Merge pull request by logging into drupal-admin01, changing directories to the appropriate platform/site directory. git pull origin branchname.    Switch to Aegir UI, verify the platfrom.   Verify each site in the platform.  Run database updates for each site.  Run features updates for each site.   Run cache clear for each site.\u200b    Import prod database.   drush sql-cli   ~/path/to/filename.sql  Review pull request in github.  If there are conflicts in the pull request, do not proceed to step 2.Vendor Alert the developer.  Process the pull request and merge with the codedebase in the proper branch  SSH into drupal admin01 and change directory to the proper platform folder  kinit on login  /usr/local/bin/kinit  Change user to Aegir and kinit again  sudo su - aegir  /usr/local/bin/kinit yourusername  Discover and verify your branch  git status'  -tells you the correct branch (precaution  Retrieve the newest code   git pull origin branchname    Log into aegir UI - click on the platform you are updating.  verify platform  verify sites  Obtain the AFS directory numbers from each sites detail page in Aegir  Back to the command line -   Copy the files from the old drupal 6 site\n  rsync -rave \u201cssh\u201d youruser@drupal02.slac.stanford.edu:/u1/www/html/sites/default/files/ /afs/slac.stanford.edu/g/web/drupal/xxxx/files/    Change the file permissions to the correct schema   changingmod o+w *  Update Database  drush updb -y  Revert Features  drush fra -y  drush fra -y  drush cc all  drush fl  Report back to verifyndor that the steps necessary have been performed on SLAC\u2019s side", 
            "title": "Vendor delivered Pull request and deployment"
        }
    ]
}